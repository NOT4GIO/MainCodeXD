--[[

██████╗░██████╗░███████╗░█████╗░██████╗░██╗░░░██╗  ░█████╗░███████╗███████╗██╗░█████╗░██╗░█████╗░██╗░░░░░
██╔══██╗██╔══██╗██╔════╝██╔══██╗██╔══██╗╚██╗░██╔╝  ██╔══██╗██╔════╝██╔════╝██║██╔══██╗██║██╔══██╗██║░░░░░
██║░░██║██████╔╝█████╗░░███████║██████╔╝░╚████╔╝░  ██║░░██║█████╗░░█████╗░░██║██║░░╚═╝██║███████║██║░░░░░
██║░░██║██╔══██╗██╔══╝░░██╔══██║██╔══██╗░░╚██╔╝░░  ██║░░██║██╔══╝░░██╔══╝░░██║██║░░██╗██║██╔══██║██║░░░░░
██████╔╝██║░░██║███████╗██║░░██║██║░░██║░░░██║░░░  ╚█████╔╝██║░░░░░██║░░░░░██║╚█████╔╝██║██║░░██║███████╗
╚═════╝░╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝╚═╝░░╚═╝░░░╚═╝░░░  ░╚════╝░╚═╝░░░░░╚═╝░░░░░╚═╝░╚════╝░╚═╝╚═╝░░╚═╝╚══════╝

\_This Lua Script was made by (Alpha 0.1.8) _/
█░░ █░█ ▄▀█ █▀█ █▄▄ █▀▀ █░█ █▀ █▀▀ ▄▀█ ▀█▀ █▀█ █▀█
█▄▄ █▄█ █▀█ █▄█ █▄█ █▀░ █▄█ ▄█ █▄▄ █▀█ ░█░ █▄█ █▀▄

Programed by 4kgw#4444 
https://discord.gg/WeppkaK62E
v1.8.9

          This script has been licensed using Dreary Official
      Unauthorized distribution of this script is forbidden.
Any attempts at tampering, reverse engineering or modifying this script
            internal logic will result in a global ban.
            
            STOP TRYING TO STEAL THE SOURCE CODE NIGGER BOY
            IF YOU WANNA LEARN SHIT DM ME BRO 💀💀💀☠️
      
           
 --]]
do local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local GetFEnv=getfenv or function()return _ENV;end;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"..",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return "";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1));return Res-(Res%1);else local Plc=2^(Start-1);return (((Bit%(Plc + Plc))>=Plc) and 1) or 0;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2);DIP=DIP + 2;return (b * 256) + a;end local function gBits32()local FlatIdent_520F=0;local a;local b;local c;local d;while true do if (FlatIdent_520F==1) then return (d * 16777216) + (c * 65536) + (b * 256) + a;end if (FlatIdent_520F==0) then a,b,c,d=Byte(ByteString,DIP,DIP + 3);DIP=DIP + 4;FlatIdent_520F=1;end end end local function gFloat()local l=gBits32();local r=gBits32();return (( -2 * gBit(r,32)) + 1) * (2^(gBit(r,21,31) -1023)) * ((((gBit(r,1,20) * (2^32)) + l)/(2^52)) + 1);end local function gString(Len)local Str;if  not Len then local FlatIdent_8494A=0;while true do if (FlatIdent_8494A==0) then Len=gBits32();if (Len==0) then return "";end break;end end end Str=Sub(ByteString,DIP,(DIP + Len) -1);DIP=DIP + Len;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select("#",...);end local function Deserialize()local FlatIdent_77AE0=0;local Instrs;local Functions;local Lines;local Chunk;local ConstCount;local Consts;while true do if (2==FlatIdent_77AE0) then for Idx=1,gBits32() do local FlatIdent_7A7E9=0;local Descriptor;while true do if (FlatIdent_7A7E9==0) then Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then local FlatIdent_32DA0=0;while true do if (FlatIdent_32DA0==0) then Inst[3]=gBits16();Inst[4]=gBits16();break;end end elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16);elseif (Type==3) then Inst[3]=gBits32() -(2^16);Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end break;end end end for Idx=1,gBits32() do Functions[Idx-1]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end if (FlatIdent_77AE0==0) then Instrs={};Functions={};Lines={};Chunk={Instrs,Functions,nil,Lines};FlatIdent_77AE0=1;end if (FlatIdent_77AE0==1) then ConstCount=gBits32();Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();FlatIdent_77AE0=2;end end end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select("#",...) -1;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if ((4212>=3600) and (Idx>=Params)) then Vararg[Idx-Params]=Args[Idx + 1];else Stk[Idx]=Args[Idx + 1];end end local Varargsz=(PCount-Params) + 1;local Inst;local Enum;while true do local FlatIdent_2541C=0;local FlatIdent_65AF3;while true do if ((FlatIdent_2541C==0) or (3562==1592)) then FlatIdent_65AF3=0;while true do if ((4031>=524) and (FlatIdent_65AF3==1)) then if ((317==317) and (Enum<=19)) then if ((1204<=2453) and (Enum<=9)) then if ((2786>=80) and (Enum<=4)) then if ((Enum<=1) or (2939<2030)) then if ((Enum==0) or (3727>4725)) then local FlatIdent_6983E=0;local FlatIdent_1D8BC;local A;local Results;local Edx;while true do if ((FlatIdent_6983E==0) or (1523>2444)) then FlatIdent_1D8BC=0;A=nil;FlatIdent_6983E=1;end if ((2888>=1771) and (FlatIdent_6983E==2)) then while true do if ((2034>1515) and (FlatIdent_1D8BC==0)) then A=Inst[2];Results={Stk[A](Stk[A + 1])};FlatIdent_1D8BC=1;end if ((1==FlatIdent_1D8BC) or (4316==105)) then Edx=0;for Idx=A,Inst[4] do local FlatIdent_161C9=0;local FlatIdent_472DE;while true do if ((2875==2875) and (FlatIdent_161C9==0)) then FlatIdent_472DE=0;while true do if ((FlatIdent_472DE==0) or (1263>=4359)) then Edx=Edx + 1;Stk[Idx]=Results[Edx];break;end end break;end end end break;end end break;end if ((2035<3209) and (1==FlatIdent_6983E)) then Results=nil;Edx=nil;FlatIdent_6983E=2;end end else local FlatIdent_4F9BB=0;local FlatIdent_7EC6D;local FlatIdent_1C49A;local B;local K;while true do if ((FlatIdent_4F9BB==1) or (582>=3287)) then B=nil;K=nil;FlatIdent_4F9BB=2;end if ((1644==1644) and (FlatIdent_4F9BB==0)) then FlatIdent_7EC6D=0;FlatIdent_1C49A=nil;FlatIdent_4F9BB=1;end if ((FlatIdent_4F9BB==2) or (2443>4479)) then while true do if ((FlatIdent_7EC6D==0) or (1534>2266)) then local FlatIdent_5444B=0;while true do if ((3165<=4722) and (FlatIdent_5444B==1)) then FlatIdent_7EC6D=1;break;end if ((827<2648) and (0==FlatIdent_5444B)) then FlatIdent_1C49A=0;B=nil;FlatIdent_5444B=1;end end end if ((1489<=2913) and (FlatIdent_7EC6D==1)) then K=nil;while true do if ((3288>=1711) and (FlatIdent_1C49A==1)) then for Idx=B + 1,Inst[4] do K=K   .. Stk[Idx];end Stk[Inst[2]]=K;break;end if ((FlatIdent_1C49A==0) or (74>=2548)) then local FlatIdent_5A550=0;while true do if ((3256>1138) and (FlatIdent_5A550==1)) then FlatIdent_1C49A=1;break;end if ((4810>1464) and (FlatIdent_5A550==0)) then B=Inst[3];K=Stk[B];FlatIdent_5A550=1;end end end end break;end end break;end end end elseif ((Enum<=2) or (659>=2991)) then local FlatIdent_5BDE1=0;local FlatIdent_8EEAD;local A;local C;local CB;local Result;local R;while true do if ((1476<2937) and (0==FlatIdent_5BDE1)) then FlatIdent_8EEAD=0;A=nil;FlatIdent_5BDE1=1;end if ((FlatIdent_5BDE1==1) or (2506>=4664)) then C=nil;CB=nil;FlatIdent_5BDE1=2;end if ((FlatIdent_5BDE1==2) or (4377<=165)) then Result=nil;R=nil;FlatIdent_5BDE1=3;end if ((263<=1975) and (FlatIdent_5BDE1==3)) then while true do if ((FlatIdent_8EEAD==1) or (3839>3976)) then local FlatIdent_971E5=0;while true do if ((FlatIdent_971E5==0) or (1671>3353)) then CB=A + 2;Result={Stk[A](Stk[A + 1],Stk[CB])};FlatIdent_971E5=1;end if ((2752>=2391) and (FlatIdent_971E5==1)) then FlatIdent_8EEAD=2;break;end end end if ((FlatIdent_8EEAD==0) or (3029==3445)) then A=Inst[2];C=Inst[4];FlatIdent_8EEAD=1;end if ((2751==2751) and (FlatIdent_8EEAD==3)) then if (R or (4402<3842)) then local FlatIdent_640EE=0;local FlatIdent_3429B;while true do if ((2048>688) and (FlatIdent_640EE==0)) then FlatIdent_3429B=0;while true do if ((FlatIdent_3429B==0) or (4685<=4410)) then Stk[CB]=R;VIP=Inst[3];break;end end break;end end else VIP=VIP + 1;end break;end if ((FlatIdent_8EEAD==2) or (316>4952)) then for Idx=1,C do Stk[CB + Idx]=Result[Idx];end R=Result[1];FlatIdent_8EEAD=3;end end break;end end elseif ((4166>=3857) and (Enum==3)) then if ((Stk[Inst[2]]~=Stk[Inst[4]]) or (3115<1712)) then VIP=VIP + 1;else VIP=Inst[3];end else Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];end elseif ((2642>=56) and (Enum<=6)) then if ((611<=3543) and (Enum==5)) then if ((3661==3661) and Stk[Inst[2]]) then VIP=VIP + 1;else VIP=Inst[3];end else local FlatIdent_34596=0;local A;while true do if ((FlatIdent_34596==0) or (553>=2452)) then A=Inst[2];Stk[A](Unpack(Stk,A + 1,Inst[3]));break;end end end elseif ((Enum<=7) or (3407<=468)) then local FlatIdent_82F10=0;local A;while true do if ((FlatIdent_82F10==0) or (2562>=4201)) then A=Inst[2];Stk[A]=Stk[A]();break;end end elseif ((1067<3696) and (Enum==8)) then local FlatIdent_9731B=0;local FlatIdent_1061A;local A;local Results;local Limit;local Edx;while true do if ((FlatIdent_9731B==0) or (2628>=4812)) then FlatIdent_1061A=0;A=nil;FlatIdent_9731B=1;end if ((FlatIdent_9731B==1) or (4662<2114)) then Results=nil;Limit=nil;FlatIdent_9731B=2;end if ((FlatIdent_9731B==2) or (3338==3612)) then Edx=nil;while true do if ((76<923) and (1==FlatIdent_1061A)) then Top=(Limit + A) -1;Edx=0;FlatIdent_1061A=2;end if ((1858<3324) and (FlatIdent_1061A==0)) then A=Inst[2];Results,Limit=_R(Stk[A]());FlatIdent_1061A=1;end if ((687<4885) and (FlatIdent_1061A==2)) then for Idx=A,Top do local FlatIdent_7E61E=0;local FlatIdent_73A8A;local FlatIdent_33C15;while true do if ((3257>1603) and (FlatIdent_7E61E==0)) then FlatIdent_73A8A=0;FlatIdent_33C15=nil;FlatIdent_7E61E=1;end if ((FlatIdent_7E61E==1) or (4749<127)) then while true do if ((4423>1889) and (FlatIdent_73A8A==0)) then FlatIdent_33C15=0;while true do if ((1470>=1332) and (FlatIdent_33C15==0)) then Edx=Edx + 1;Stk[Idx]=Results[Edx];break;end end break;end end break;end end end break;end end break;end end else local FlatIdent_7147A=0;local FlatIdent_4F57A;local A;local Results;local Limit;local Edx;while true do if ((FlatIdent_7147A==2) or (3370<1871)) then Edx=nil;while true do if ((FlatIdent_4F57A==1) or (1873>2484)) then local FlatIdent_571C5=0;while true do if ((FlatIdent_571C5==1) or (992==2721)) then FlatIdent_4F57A=2;break;end if ((3071>=2106) and (0==FlatIdent_571C5)) then local FlatIdent_71717=0;while true do if ((3188<4724) and (FlatIdent_71717==1)) then FlatIdent_571C5=1;break;end if ((FlatIdent_71717==0) or (1917==4453)) then Top=(Limit + A) -1;Edx=0;FlatIdent_71717=1;end end end end end if ((FlatIdent_4F57A==2) or (4827<1783)) then for Idx=A,Top do local FlatIdent_1D383=0;local FlatIdent_53B20;local FlatIdent_906FD;while true do if ((FlatIdent_1D383==0) or (1969<=1124)) then FlatIdent_53B20=0;FlatIdent_906FD=nil;FlatIdent_1D383=1;end if ((3998>=3113) and (FlatIdent_1D383==1)) then while true do if ((4006==4006) and (FlatIdent_53B20==0)) then FlatIdent_906FD=0;while true do if ((4884>1931) and (FlatIdent_906FD==0)) then Edx=Edx + 1;Stk[Idx]=Results[Edx];break;end end break;end end break;end end end break;end if ((1590<2853) and (FlatIdent_4F57A==0)) then local FlatIdent_52D18=0;while true do if ((1322<=3461) and (0==FlatIdent_52D18)) then local FlatIdent_68228=0;while true do if ((2693<2986) and (FlatIdent_68228==0)) then A=Inst[2];Results,Limit=_R(Stk[A](Stk[A + 1]));FlatIdent_68228=1;end if ((FlatIdent_68228==1) or (2431>=4987)) then FlatIdent_52D18=1;break;end end end if ((2876<=3395) and (FlatIdent_52D18==1)) then FlatIdent_4F57A=1;break;end end end end break;end if ((1021==1021) and (FlatIdent_7147A==0)) then local FlatIdent_8E893=0;while true do if ((1172>128) and (FlatIdent_8E893==1)) then FlatIdent_7147A=1;break;end if ((0==FlatIdent_8E893) or (1685>=2323)) then FlatIdent_4F57A=0;A=nil;FlatIdent_8E893=1;end end end if ((1902<2701) and (FlatIdent_7147A==1)) then Results=nil;Limit=nil;FlatIdent_7147A=2;end end end elseif ((2575>=1489) and (Enum<=14)) then if ((Enum<=11) or (2509==3265)) then if ((Enum==10) or (2370>=3401)) then local FlatIdent_59D96=0;local FlatIdent_351F3;local A;local Cls;while true do if ((1074<3372) and (FlatIdent_59D96==0)) then FlatIdent_351F3=0;A=nil;FlatIdent_59D96=1;end if ((4972>=3514) and (FlatIdent_59D96==1)) then Cls=nil;while true do if ((FlatIdent_351F3==1) or (945>=4328)) then for Idx=1, #Lupvals do local FlatIdent_16716=0;local List;while true do if ((FlatIdent_16716==0) or (2530>=4482)) then List=Lupvals[Idx];for Idz=0, #List do local FlatIdent_543AE=0;local FlatIdent_90840;local FlatIdent_563E6;local Upv;local NStk;local DIP;while true do if ((FlatIdent_543AE==2) or (3736<3012)) then DIP=nil;while true do if ((FlatIdent_90840==0) or (787>1060)) then local FlatIdent_90D3A=0;while true do if ((3363<3454) and (0==FlatIdent_90D3A)) then FlatIdent_563E6=0;Upv=nil;FlatIdent_90D3A=1;end if ((FlatIdent_90D3A==1) or (2063<402)) then FlatIdent_90840=1;break;end end end if ((2785<=3455) and (FlatIdent_90840==2)) then while true do if ((576==576) and (FlatIdent_563E6==1)) then DIP=Upv[2];if ((1429<2540) and (NStk==Stk) and (DIP>=A)) then local FlatIdent_28CEF=0;while true do if ((FlatIdent_28CEF==0) or (3213<915)) then Cls[DIP]=NStk[DIP];Upv[1]=Cls;break;end end end break;end if ((0==FlatIdent_563E6) or (3413>4580)) then local FlatIdent_73D23=0;while true do if ((832==832) and (FlatIdent_73D23==0)) then Upv=List[Idz];NStk=Upv[1];FlatIdent_73D23=1;end if ((FlatIdent_73D23==1) or (3704<=2724)) then FlatIdent_563E6=1;break;end end end end break;end if ((FlatIdent_90840==1) or (2130<2032)) then local FlatIdent_64769=0;while true do if ((FlatIdent_64769==1) or (4604<=2614)) then FlatIdent_90840=2;break;end if ((0==FlatIdent_64769) or (563==1192)) then NStk=nil;DIP=nil;FlatIdent_64769=1;end end end end break;end if ((FlatIdent_543AE==0) or (556>2795)) then FlatIdent_90840=0;FlatIdent_563E6=nil;FlatIdent_543AE=1;end if ((614<=4662) and (FlatIdent_543AE==1)) then Upv=nil;NStk=nil;FlatIdent_543AE=2;end end end break;end end end break;end if ((1528>=1379) and (FlatIdent_351F3==0)) then A=Inst[2];Cls={};FlatIdent_351F3=1;end end break;end end elseif ((Stk[Inst[2]]==Inst[4]) or (2608<=883)) then VIP=VIP + 1;else VIP=Inst[3];end elseif ((347<=4819) and (Enum<=12)) then Stk[Inst[2]][Inst[3]]=Stk[Inst[4]];elseif ((Enum==13) or (1487>=4222)) then local FlatIdent_87925=0;local A;local Results;local Limit;local Edx;while true do if ((FlatIdent_87925==2) or (916>=961)) then for Idx=A,Top do local FlatIdent_1B709=0;local FlatIdent_2CCD5;while true do if ((FlatIdent_1B709==0) or (2856<=515)) then FlatIdent_2CCD5=0;while true do if ((FlatIdent_2CCD5==0) or (2459==2670)) then Edx=Edx + 1;Stk[Idx]=Results[Edx];break;end end break;end end end break;end if ((3587>2265) and (FlatIdent_87925==0)) then local FlatIdent_7048F=0;while true do if ((1017==1017) and (FlatIdent_7048F==0)) then A=Inst[2];Results,Limit=_R(Stk[A](Unpack(Stk,A + 1,Inst[3])));FlatIdent_7048F=1;end if ((FlatIdent_7048F==1) or (249==2470)) then FlatIdent_87925=1;break;end end end if ((157<=4122) and (FlatIdent_87925==1)) then Top=(Limit + A) -1;Edx=0;FlatIdent_87925=2;end end else Env[Inst[3]]=Stk[Inst[2]];end elseif ((Enum<=16) or (4332<=1668)) then if ((4664>3822) and (Enum>15)) then local FlatIdent_4B690=0;local FlatIdent_8684D;local FlatIdent_4F46F;local A;while true do if ((FlatIdent_4B690==1) or (4009<1045)) then A=nil;while true do if ((FlatIdent_8684D==0) or (115>=2024)) then FlatIdent_4F46F=0;A=nil;FlatIdent_8684D=1;end if ((FlatIdent_8684D==1) or (4499<=2351)) then while true do if ((698<=2305) and (FlatIdent_4F46F==0)) then A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1,Top));break;end end break;end end break;end if ((4938>4274) and (FlatIdent_4B690==0)) then FlatIdent_8684D=0;FlatIdent_4F46F=nil;FlatIdent_4B690=1;end end else local FlatIdent_4179F=0;local FlatIdent_369A9;local FlatIdent_7D7D7;local A;local T;local B;while true do if ((4564>=3080) and (FlatIdent_4179F==2)) then B=nil;while true do if ((2375>=1119) and (FlatIdent_369A9==2)) then while true do if ((4672>304) and (FlatIdent_7D7D7==0)) then local FlatIdent_591B0=0;while true do if ((FlatIdent_591B0==0) or (2387>=4255)) then local FlatIdent_644B9=0;while true do if ((407<=4311) and (FlatIdent_644B9==1)) then FlatIdent_591B0=1;break;end if ((4234>3640) and (FlatIdent_644B9==0)) then A=Inst[2];T=Stk[A];FlatIdent_644B9=1;end end end if ((FlatIdent_591B0==1) or (1323>=2061)) then FlatIdent_7D7D7=1;break;end end end if ((3244>1712) and (FlatIdent_7D7D7==1)) then B=Inst[3];for Idx=1,B do T[Idx]=Stk[A + Idx];end break;end end break;end if ((0==FlatIdent_369A9) or (4933<=2910)) then local FlatIdent_39377=0;while true do if ((FlatIdent_39377==1) or (2295>=2653)) then FlatIdent_369A9=1;break;end if ((206<1618) and (0==FlatIdent_39377)) then FlatIdent_7D7D7=0;A=nil;FlatIdent_39377=1;end end end if ((FlatIdent_369A9==1) or (3121>3937)) then T=nil;B=nil;FlatIdent_369A9=2;end end break;end if ((FlatIdent_4179F==0) or (1223>1878)) then FlatIdent_369A9=0;FlatIdent_7D7D7=nil;FlatIdent_4179F=1;end if ((FlatIdent_4179F==1) or (4414<2325)) then A=nil;T=nil;FlatIdent_4179F=2;end end end elseif ((249==249) and (Enum<=17)) then local FlatIdent_5F489=0;local A;while true do if ((FlatIdent_5F489==0) or (2133>=4106)) then A=Inst[2];Stk[A](Stk[A + 1]);break;end end elseif ((4674>=2192) and (Enum>18)) then Stk[Inst[2]]();else local FlatIdent_48036=0;local A;while true do if ((FlatIdent_48036==0) or (1334>=2646)) then A=Inst[2];Stk[A]=Stk[A](Stk[A + 1]);break;end end end elseif ((733<2860) and (Enum<=29)) then if ((Enum<=24) or (3190<=2808)) then if ((1416>=677) and (Enum<=21)) then if ((Enum==20) or (2400<2051)) then Stk[Inst[2]]=Upvalues[Inst[3]];else local FlatIdent_1CF56=0;local FlatIdent_BE0E;local FlatIdent_1CE74;local A;local B;while true do if ((2924<=3507) and (FlatIdent_1CF56==2)) then while true do if ((3398>=1223) and (FlatIdent_BE0E==0)) then local FlatIdent_3AA43=0;while true do if ((FlatIdent_3AA43==0) or (4691<2084)) then FlatIdent_1CE74=0;A=nil;FlatIdent_3AA43=1;end if ((3213>551) and (1==FlatIdent_3AA43)) then FlatIdent_BE0E=1;break;end end end if ((FlatIdent_BE0E==1) or (4274<737)) then B=nil;while true do if ((FlatIdent_1CE74==0) or (2424>3649)) then local FlatIdent_DB55=0;local FlatIdent_293CB;while true do if ((2126<=2208) and (FlatIdent_DB55==0)) then FlatIdent_293CB=0;while true do if ((969<4834) and (FlatIdent_293CB==0)) then local FlatIdent_DDAA=0;while true do if ((1781<3050) and (FlatIdent_DDAA==0)) then A=Inst[2];B=Stk[Inst[3]];FlatIdent_DDAA=1;end if ((2912==2912) and (FlatIdent_DDAA==1)) then FlatIdent_293CB=1;break;end end end if ((FlatIdent_293CB==1) or (4333==2928)) then FlatIdent_1CE74=1;break;end end break;end end end if ((2215<=2965) and (FlatIdent_1CE74==1)) then Stk[A + 1]=B;Stk[A]=B[Inst[4]];break;end end break;end end break;end if ((1==FlatIdent_1CF56) or (1779<=1569)) then A=nil;B=nil;FlatIdent_1CF56=2;end if ((FlatIdent_1CF56==0) or (1006>=4419)) then FlatIdent_BE0E=0;FlatIdent_1CE74=nil;FlatIdent_1CF56=1;end end end elseif ((Enum<=22) or (3852<3050)) then if ((3492>2615) and (Inst[2]==Stk[Inst[4]])) then VIP=VIP + 1;else VIP=Inst[3];end elseif ((Enum==23) or (634==2739)) then Stk[Inst[2]]=Wrap(Proto[Inst[3]],nil,Env);else local FlatIdent_4204C=0;local A;while true do if ((FlatIdent_4204C==0) or (3367==1752)) then A=Inst[2];Stk[A](Unpack(Stk,A + 1,Top));break;end end end elseif ((Enum<=26) or (4604==2061)) then if ((Enum>25) or (87<=12)) then Stk[Inst[2]][Inst[3]]=Inst[4];else local FlatIdent_7E554=0;local FlatIdent_E4E5;local A;local Results;local Edx;while true do if ((2295==2295) and (FlatIdent_7E554==0)) then FlatIdent_E4E5=0;A=nil;FlatIdent_7E554=1;end if ((1205<=3028) and (FlatIdent_7E554==2)) then while true do if ((879<4188) and (FlatIdent_E4E5==1)) then Edx=0;for Idx=A,Inst[4] do local FlatIdent_65E60=0;local FlatIdent_1D822;local FlatIdent_6472E;while true do if ((FlatIdent_65E60==0) or (2241>=4893)) then FlatIdent_1D822=0;FlatIdent_6472E=nil;FlatIdent_65E60=1;end if ((646>454) and (FlatIdent_65E60==1)) then while true do if ((548<=2649) and (FlatIdent_1D822==0)) then FlatIdent_6472E=0;while true do if ((FlatIdent_6472E==0) or (3764<=3605)) then Edx=Edx + 1;Stk[Idx]=Results[Edx];break;end end break;end end break;end end end break;end if ((FlatIdent_E4E5==0) or (1206==4820)) then local FlatIdent_583B0=0;local FlatIdent_41567;while true do if ((3288<3313) and (FlatIdent_583B0==0)) then FlatIdent_41567=0;while true do if ((FlatIdent_41567==0) or (1686<711)) then A=Inst[2];Results={Stk[A](Unpack(Stk,A + 1,Top))};FlatIdent_41567=1;end if ((2681<=3449) and (FlatIdent_41567==1)) then FlatIdent_E4E5=1;break;end end break;end end end end break;end if ((1==FlatIdent_7E554) or (287==4965)) then Results=nil;Edx=nil;FlatIdent_7E554=2;end end end elseif ((Enum<=27) or (4335<3804)) then for Idx=Inst[2],Inst[3] do Stk[Idx]=nil;end elseif ((Enum==28) or (3574>3900)) then local FlatIdent_303C5=0;local B;while true do if ((2897==2897) and (FlatIdent_303C5==0)) then B=Stk[Inst[4]];if ( not B or (3100>=4375)) then VIP=VIP + 1;else local FlatIdent_17562=0;local FlatIdent_7D2A6;local FlatIdent_19358;while true do if ((3652>2206) and (FlatIdent_17562==1)) then while true do if ((FlatIdent_7D2A6==0) or (4584==2998)) then FlatIdent_19358=0;while true do if ((FlatIdent_19358==0) or (1204>3623)) then Stk[Inst[2]]=B;VIP=Inst[3];break;end end break;end end break;end if ((1891==1891) and (FlatIdent_17562==0)) then FlatIdent_7D2A6=0;FlatIdent_19358=nil;FlatIdent_17562=1;end end end break;end end else local FlatIdent_1EFD1=0;local FlatIdent_47014;local NewProto;local NewUvals;local Indexes;while true do if ((FlatIdent_1EFD1==2) or (3532<=2655)) then while true do if ((FlatIdent_47014==2) or (879>=2480)) then for Idx=1,Inst[4] do local FlatIdent_5AD97=0;local Mvm;while true do if ((1==FlatIdent_5AD97) or (3807<=1907)) then if ((2257<2636) and (Mvm[1]==31)) then Indexes[Idx-1]={Stk,Mvm[3]};else Indexes[Idx-1]={Upvalues,Mvm[3]};end Lupvals[ #Lupvals + 1]=Indexes;break;end if ((3683>692) and (FlatIdent_5AD97==0)) then VIP=VIP + 1;Mvm=Instr[VIP];FlatIdent_5AD97=1;end end end Stk[Inst[2]]=Wrap(NewProto,NewUvals,Env);break;end if ((1==FlatIdent_47014) or (3464<=2135)) then local FlatIdent_55841=0;while true do if ((FlatIdent_55841==0) or (2704>4469)) then Indexes={};NewUvals=Setmetatable({},{__index=function(_,Key)local FlatIdent_1E1E5=0;local FlatIdent_AF48;local FlatIdent_66B75;local Val;while true do if ((1145<2420) and (FlatIdent_1E1E5==0)) then FlatIdent_AF48=0;FlatIdent_66B75=nil;FlatIdent_1E1E5=1;end if ((697>=585) and (FlatIdent_1E1E5==1)) then Val=nil;while true do if ((3582>=2618) and (FlatIdent_AF48==0)) then FlatIdent_66B75=0;Val=nil;FlatIdent_AF48=1;end if ((1071<=2546) and (FlatIdent_AF48==1)) then while true do if ((4737>=414) and (FlatIdent_66B75==0)) then local FlatIdent_2C908=0;local FlatIdent_10A68;while true do if ((232==232) and (FlatIdent_2C908==0)) then FlatIdent_10A68=0;while true do if ((FlatIdent_10A68==0) or (3501<3235)) then local FlatIdent_63A14=0;while true do if ((2926>=2072) and (0==FlatIdent_63A14)) then Val=Indexes[Key];return Val[1][Val[2]];end end end end break;end end end end break;end end break;end end end,__newindex=function(_,Key,Value)local FlatIdent_5947A=0;local FlatIdent_2F03C;local Val;while true do if ((FlatIdent_5947A==1) or (3786>4784)) then while true do if ((FlatIdent_2F03C==0) or (4841<4347)) then Val=Indexes[Key];Val[1][Val[2]]=Value;break;end end break;end if ((0==FlatIdent_5947A) or (3175<=3067)) then FlatIdent_2F03C=0;Val=nil;FlatIdent_5947A=1;end end end});FlatIdent_55841=1;end if ((FlatIdent_55841==1) or (410==4048)) then FlatIdent_47014=2;break;end end end if ((1068<=1800) and (FlatIdent_47014==0)) then local FlatIdent_8C16F=0;while true do if ((FlatIdent_8C16F==0) or (3354==4165)) then NewProto=Proto[Inst[3]];NewUvals=nil;FlatIdent_8C16F=1;end if ((FlatIdent_8C16F==1) or (342>1357)) then FlatIdent_47014=1;break;end end end end break;end if ((1209>=960) and (FlatIdent_1EFD1==1)) then NewUvals=nil;Indexes=nil;FlatIdent_1EFD1=2;end if ((0==FlatIdent_1EFD1) or (3971>4690)) then FlatIdent_47014=0;NewProto=nil;FlatIdent_1EFD1=1;end end end elseif ((Enum<=34) or (1001>4866)) then if ((1109<=4210) and (Enum<=31)) then if ((Enum==30) or (2143<=561)) then Stk[Inst[2]]=Inst[3]~=0;else Stk[Inst[2]]=Stk[Inst[3]];end elseif ((1212<4303) and (Enum<=32)) then local FlatIdent_14D8E=0;local FlatIdent_1A916;local FlatIdent_87C88;local A;local T;while true do if ((897<=4347) and (FlatIdent_14D8E==1)) then A=nil;T=nil;FlatIdent_14D8E=2;end if ((2697>711) and (2==FlatIdent_14D8E)) then while true do if ((1039>48) and (FlatIdent_1A916==0)) then local FlatIdent_6B11B=0;while true do if ((FlatIdent_6B11B==0) or (3540<2451)) then FlatIdent_87C88=0;A=nil;FlatIdent_6B11B=1;end if ((1107>633) and (1==FlatIdent_6B11B)) then FlatIdent_1A916=1;break;end end end if ((958==958) and (1==FlatIdent_1A916)) then T=nil;while true do if ((246==246) and (FlatIdent_87C88==1)) then for Idx=A + 1,Inst[3] do Insert(T,Stk[Idx]);end break;end if ((FlatIdent_87C88==0) or (3633>=4987)) then local FlatIdent_6602F=0;local FlatIdent_EE82;while true do if ((3459>=822) and (FlatIdent_6602F==0)) then FlatIdent_EE82=0;while true do if ((3017<4165) and (FlatIdent_EE82==1)) then FlatIdent_87C88=1;break;end if ((FlatIdent_EE82==0) or (755>4001)) then local FlatIdent_9488F=0;while true do if ((FlatIdent_9488F==1) or (4768<168)) then FlatIdent_EE82=1;break;end if ((2706>=78) and (0==FlatIdent_9488F)) then A=Inst[2];T=Stk[A];FlatIdent_9488F=1;end end end end break;end end end end break;end end break;end if ((4621==4621) and (0==FlatIdent_14D8E)) then FlatIdent_1A916=0;FlatIdent_87C88=nil;FlatIdent_14D8E=1;end end elseif ((3514<3567) and (Enum>33)) then do return;end else local FlatIdent_4538A=0;local A;while true do if ((FlatIdent_4538A==0) or (2408>=3309)) then A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1,Inst[3]));break;end end end elseif ((Enum<=37) or (3042<233)) then if ((Enum<=35) or (4199==2255)) then Stk[Inst[2]]=Inst[3];elseif ((Enum>36) or (4154<1400)) then if ((Stk[Inst[2]]==Stk[Inst[4]]) or (451>=2131)) then VIP=VIP + 1;else VIP=Inst[3];end else VIP=Inst[3];end elseif ((Enum<=38) or (1414==2098)) then if ((563==563) and (Stk[Inst[2]]~=Inst[4])) then VIP=VIP + 1;else VIP=Inst[3];end elseif ((2314<3435) and (Enum==39)) then Stk[Inst[2]]={};else Stk[Inst[2]]=Env[Inst[3]];end VIP=VIP + 1;break;end if ((0==FlatIdent_65AF3) or (3806<1239)) then Inst=Instr[VIP];Enum=Inst[1];FlatIdent_65AF3=1;end end break;end end end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or "?";error("Script error at ["   .. line   .. "]:"   .. A[2]);else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCalletFEnv(),...);end
